<?php

namespace Drupal\wcr\Controller;

use Drupal\wcr\Plugin\wcr\RenderArrayFormatter\PagePreparationTrait;
use \Symfony\Component\HttpFoundation\Response;
use Exception;

class LazyBuilderRenderController {

  use PagePreparationTrait;

  protected $controllerResolver;

  public function __construct() {
    $this->controllerResolver = \Drupal::service('controller_resolver');
  }

  public function validate() {
    /*if (isset($elements['#lazy_builder'])) {
      // @todo Convert to assertions once https://www.drupal.org/node/2408013
      //   lands.
      if (!is_array($elements['#lazy_builder'])) {
        throw new \DomainException('The #lazy_builder property must have an array as a value.');
      }
      if (count($elements['#lazy_builder']) !== 2) {
        throw new \DomainException('The #lazy_builder property must have an array as a value, containing two values: the callback, and the arguments for the callback.');
      }
      if (count($elements['#lazy_builder'][1]) !== count(array_filter($elements['#lazy_builder'][1], function ($v) {
          return is_null($v) || is_scalar($v);
        }))
      ) {
        throw new \DomainException("A #lazy_builder callback's context may only contain scalar values or NULL.");
      }
      $children = Element::children($elements);
      if ($children) {
        throw new \DomainException(sprintf('When a #lazy_builder callback is specified, no children can exist; all children must be generated by the #lazy_builder callback. You specified the following children: %s.', implode(', ', $children)));
      }
      $supported_keys = [
        '#lazy_builder',
        '#cache',
        '#create_placeholder',
        // These keys are not actually supported, but they are added automatically
        // by the Renderer, so we don't crash on them; them being missing when
        // their #lazy_builder callback is invoked won't surprise the developer.
        '#weight',
        '#printed'
      ];
      $unsupported_keys = array_diff(array_keys($elements), $supported_keys);
      if (count($unsupported_keys)) {
        throw new \DomainException(sprintf('When a #lazy_builder callback is specified, no properties can exist; all properties must be generated by the #lazy_builder callback. You specified the following properties: %s.', implode(', ', $unsupported_keys)));
      }
    }
    // Determine whether to do auto-placeholdering.
    if ($this->placeholderGenerator->canCreatePlaceholder($elements) && $this->placeholderGenerator->shouldAutomaticallyPlaceholder($elements)) {
      $elements['#create_placeholder'] = TRUE;
    }*/
  }

  public function handle() {
    $request = \Drupal::request();
    $callback = $request->get('callback');
    $args = $request->get('args');
    $token = $request->get('token');
    try {
      $args_array = [];
      parse_str($args, $args_array);
      $build = $this->render($callback, $args_array);
    }
    catch (Exception $e){
      $response = new Response();
      $response->setContent("Error:" . $e->getMessage());
      $response->setStatusCode(Response::HTTP_NOT_FOUND);
      return $response;
    }
    $response = new Response();
    $response->setContent($build);
    $response->setStatusCode(Response::HTTP_NOT_FOUND);
    return $response;

  }

  public function render($callable, $args) {
    if (is_string($callable) && strpos($callable, '::') === FALSE) {
      $callable = $this->controllerResolver->getControllerFromDefinition($callable);
    }
    $new_elements = call_user_func_array($callable, $args);
    return $this->getRenderer()->renderRoot($new_elements);
  }
}