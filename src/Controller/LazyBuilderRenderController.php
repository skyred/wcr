<?php
/**
 *
 * @see https://github.com/drupal/drupal/blob/8.2.x/core/lib/Drupal/Core/Render/Renderer.php#L350
 */

class LazyBuilderRenderController {
  public function validate() {
      
  }
  public function render() {
     if (isset($elements['#lazy_builder'])) { 
304       // @todo Convert to assertions once https://www.drupal.org/node/2408013 
305       //   lands. 
306       if (!is_array($elements['#lazy_builder'])) { 
307         throw new \DomainException('The #lazy_builder property must have an array as a value.'); 
308       } 
309       if (count($elements['#lazy_builder']) !== 2) { 
310         throw new \DomainException('The #lazy_builder property must have an array as a value, containing two values: the callback, and the arguments for the callback.'); 
311       } 
312       if (count($elements['#lazy_builder'][1]) !== count(array_filter($elements['#lazy_builder'][1], function($v) { return is_null($v) || is_scalar($v); }))) { 
313         throw new \DomainException("A #lazy_builder callback's context may only contain scalar values or NULL."); 
314       } 
315       $children = Element::children($elements); 
316       if ($children) { 
317         throw new \DomainException(sprintf('When a #lazy_builder callback is specified, no children can exist; all children must be generated by the #lazy_builder callback. You specified the following children: %s.', implode(', ', $children))); 
318       } 
319       $supported_keys = [ 
320         '#lazy_builder', 
321         '#cache', 
322         '#create_placeholder', 
323         // These keys are not actually supported, but they are added automatically 
324         // by the Renderer, so we don't crash on them; them being missing when 
325         // their #lazy_builder callback is invoked won't surprise the developer. 
326         '#weight', 
327         '#printed' 
328       ]; 
329       $unsupported_keys = array_diff(array_keys($elements), $supported_keys); 
330       if (count($unsupported_keys)) { 
331         throw new \DomainException(sprintf('When a #lazy_builder callback is specified, no properties can exist; all properties must be generated by the #lazy_builder callback. You specified the following properties: %s.', implode(', ', $unsupported_keys))); 
332       } 
333     } 
334     // Determine whether to do auto-placeholdering. 
335     if ($this->placeholderGenerator->canCreatePlaceholder($elements) && $this->placeholderGenerator->shouldAutomaticallyPlaceholder($elements)) { 
336       $elements['#create_placeholder'] = TRUE; 
337     } 
338     // If instructed to create a placeholder, and a #lazy_builder callback is 
339     // present (without such a callback, it would be impossible to replace the 
340     // placeholder), replace the current element with a placeholder. 
341     // @todo remove the isMethodSafe() check when 
342     //       https://www.drupal.org/node/2367555 lands. 
343     if (isset($elements['#create_placeholder']) && $elements['#create_placeholder'] === TRUE && $this->requestStack->getCurrentRequest()->isMethodSafe()) { 
344       if (!isset($elements['#lazy_builder'])) { 
345         throw new \LogicException('When #create_placeholder is set, a #lazy_builder callback must be present as well.'); 
346       } 
347       $elements = $this->placeholderGenerator->createPlaceholder($elements); 
348     } 
349     // Build the element if it is still empty. 
350     if (isset($elements['#lazy_builder'])) { 
351       $callable = $elements['#lazy_builder'][0]; 
352       $args = $elements['#lazy_builder'][1]; 
353       if (is_string($callable) && strpos($callable, '::') === FALSE) { 
354         $callable = $this->controllerResolver->getControllerFromDefinition($callable); 
355       } 
356       $new_elements = call_user_func_array($callable, $args); 
357       // Retain the original cacheability metadata, plus cache keys. 
358       CacheableMetadata::createFromRenderArray($elements) 
359         ->merge(CacheableMetadata::createFromRenderArray($new_elements)) 
360         ->applyTo($new_elements); 
361       if (isset($elements['#cache']['keys'])) { 
362         $new_elements['#cache']['keys'] = $elements['#cache']['keys']; 
363       } 
364       $elements = $new_elements; 
365       $elements['#lazy_builder_built'] = TRUE; 
366     } 

  }  
}